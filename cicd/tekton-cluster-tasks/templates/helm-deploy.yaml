apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: helm-deploy
spec:
  params:
  - name: NAME
    description: application name
  - name: IMAGE
  - name: ImageTag
  - name: userEmail  
    description: "User email for Git configuration"
    type: string
  - name: gitProjectUrl
    description: "User project repo url"
  - name: appConfigPath
    description: "User application config path"
  - name: clusterName
    description: "name of the cluster"
  workspaces:
  - name: output
    description: The git repo will be cloned onto the volume backing this Workspace.
  - name: ssh-directory
    optional: true
    description: |
      A .ssh directory with private key, known_hosts, config, etc. Copied to
      the user's home before git commands are executed. Used to authenticate
      with the git remote when performing the clone. Binding a Secret to this
      Workspace is strongly recommended over other volume types.
  - name: basic-auth
    optional: true
    description: |
      A Workspace containing a .gitconfig and .git-credentials file. These
      will be copied to the user's home before any git commands are run. Any
      other files in this Workspace are ignored. It is strongly recommended
      to use ssh-directory over basic-auth whenever possible and to bind a
      Secret to this Workspace over other volume types.
  - name: argo-auth
    optional: true
    description: |
      A Workspace containing a argocd server and credentials.

  steps:
  
  - name: clone-repo
    image: ghcr.io/kube-tarian/helmrepo-supporting-tools/git:v2.26.2
    resources:
      limits:
        cpu: 50m
        memory: 60Mi
      requests:
        cpu: 10m
        memory: 20Mi
    env:
    - name: GIT_PROJECT_URL
      value: $(params.gitProjectUrl)
    script: |
      echo "Cloning the repository..."
      export GIT_USERNAME=`cat /workspace/basic-auth/GIT_USER_NAME`
      export GIT_TOKEN=`cat /workspace/basic-auth/GIT_TOKEN`

      git clone https://${GIT_USERNAME}:${GIT_TOKEN}@${GIT_PROJECT_URL} /workspace/source
      
  - image: ghcr.io/kube-tarian/helmrepo-supporting-tools/git:v2.26.2
    resources:
      limits:
        cpu: 50m
        memory: 60Mi
      requests:
        cpu: 10m
        memory: 20Mi
    name: update-yaml
    env:
    - name: DIRECTORY
      value: $(params.appConfigPath)
    script: |
      #!/usr/bin/env sh
      set -e
      VALUES_FILE="${DIRECTORY}/$(inputs.params.NAME)/values.yaml"

      echo "updating image tag to $(inputs.params.ImageTag)"
      sed -i "s#$(inputs.params.IMAGE):[a-zA-Z0-9.-]*#$(inputs.params.IMAGE):$(inputs.params.ImageTag)#g" "$VALUES_FILE"

      # Update the tag for the structure: tag: ""
      sed -E -i "s#(tag:)\s*\"?[^\"]*\"?#\1 \"$(inputs.params.ImageTag)\"#" "$VALUES_FILE"
    workingDir: /workspace/source

  - name: commit-push-changes-gitops
    image: ghcr.io/kube-tarian/helmrepo-supporting-tools/git:v2.26.2
    resources:
      limits:
        cpu: 300m
        memory: 200Mi
      requests:
        cpu: 50m
        memory: 40Mi
    env:
    - name: USER_EMAIL
      value: $(params.userEmail)
    workingDir: "/workspace/source"
    script: |
      #!/usr/bin/env sh
      set -e
      
      export USERNAME=`cat /workspace/basic-auth/GIT_USER_NAME`
      git config --global user.email "${USER_EMAIL}"
      git config --global user.name "${USERNAME}"  

      git add .
      git commit --allow-empty -m "updating imagetag to $(inputs.params.ImageTag)"

      git push origin main

  - name: wait-for-argocd-rollout
    image: ghcr.io/kube-tarian/helmrepo-supporting-tools/argocd:v2.6.15
    resources:
      limits:
        cpu: 300m
        memory: 200Mi
      requests:
        cpu: 50m
        memory: 40Mi
    env:
    - name: ARGOCD_APP_NAME
      value: $(params.clusterName)
    script: |
      #!/usr/bin/env sh
      set -e
      
      export ARGOCD_SERVER=`cat /workspace/argo-auth/SERVER_URL`
      export USERNAME=`cat /workspace/argo-auth/USERNAME`
      export PASSWORD=`cat /workspace/argo-auth/PASSWORD`

      echo "y" | argocd login ${ARGOCD_SERVER} --username $USERNAME --password $PASSWORD --insecure --grpc-web
      argocd app sync ${ARGOCD_APP_NAME}-$(inputs.params.AppName) --insecure --server ${ARGOCD_SERVER} --grpc-web
      argocd app wait ${ARGOCD_APP_NAME}-$(inputs.params.AppName) --sync --health --operation --insecure --server ${ARGOCD_SERVER} --grpc-web

  - name: check-argocd-status
    image: ghcr.io/kube-tarian/helmrepo-supporting-tools/argocd:v2.6.15
    resources:
      limits:
        cpu: 50m
        memory: 60Mi
      requests:
        cpu: 10m
        memory: 20Mi
    env:
    - name: ARGOCD_APP_NAME
      value: $(params.clusterName)
    script: |
      #!/usr/bin/env sh
      set -e

      export ARGOCD_SERVER=`cat /workspace/argo-auth/SERVER_URL`
      export USERNAME=`cat /workspace/argo-auth/USERNAME`
      export PASSWORD=`cat /workspace/argo-auth/PASSWORD`

      echo "y" | argocd login ${ARGOCD_SERVER} --username $USERNAME --password $PASSWORD --insecure --grpc-web
      sync_status=$(argocd app get ${ARGOCD_APP_NAME}-$(inputs.params.AppName) --insecure --server ${ARGOCD_SERVER} --grpc-web | awk '/Sync Status:/ {print $3}')
      echo "Sync Status: $sync_status"
      if [ "$sync_status" = "Synced" ]; then
        echo "Application is successfully synced."
      else
        echo "Application synchronization failed."
      fi
